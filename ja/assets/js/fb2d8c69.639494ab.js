(self.webpackChunkgo_mobile=self.webpackChunkgo_mobile||[]).push([[7761],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99526:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),o=["components"],l={id:"create-kotlin-formatter",title:"Create Kotlin formatter"},c=void 0,s={unversionedId:"tutorials/data-formatter/create-kotlin-formatter",id:"tutorials/data-formatter/create-kotlin-formatter",isDocsHomePage:!1,title:"Create Kotlin formatter",description:"OBJECTIVES",source:"@site/docs/tutorials/data-formatter/create-kotlin-formatter.md",sourceDirName:"tutorials/data-formatter",slug:"/tutorials/data-formatter/create-kotlin-formatter",permalink:"/go-mobile/ja/docs/next/tutorials/data-formatter/create-kotlin-formatter",editUrl:"https://github.com/4d/go-mobile/edit/main/docs/tutorials/data-formatter/create-kotlin-formatter.md",version:"current",frontMatter:{id:"create-kotlin-formatter",title:"Create Kotlin formatter"},sidebar:"tutorials",previous:{title:"Create Swift formatter",permalink:"/go-mobile/ja/docs/next/tutorials/data-formatter/create-swift-formatter"},next:{title:"Filter queries",permalink:"/go-mobile/ja/docs/next/tutorials/filter-queries/filter-query-introduction"}},d=[{value:"Object attribute Kotlin formatter",id:"object-attribute-kotlin-formatter",children:[{value:"On iOS:",id:"on-ios",children:[]},{value:"On Android",id:"on-android",children:[]}]}],p={toc:d};function u(e){var t=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"OBJECTIVES")),(0,i.kt)("p",{parentName:"blockquote"},"Create your first data formatters.")),(0,i.kt)("h2",{id:"object-attribute-kotlin-formatter"},"Object attribute Kotlin formatter"),(0,i.kt)("p",null,"In the following example, we want to display an address getting only relevant values that are available in the following object using a Kotlin formatter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-4d"},'$Obj:=New object \n$Obj.name:="4D SAS" \n$Obj.address1:="66 rue de Sartrouville" \n$Obj.address2:="Parc les Erables, b\xe2timent 4" \n$Obj.zipCode:="78230" \n$Obj.city:="Le Pecq" \n$Obj.country:="France" \n$Obj.phoneNumber:="+33 1 30 53 92 00" \n$Obj.website:="fr.4d.com"\n\n$Ent:=ds.Employees.get(4)\n$Ent.Object_Attribute:=$Obj\n$Ent.save()\n\n')),(0,i.kt)("h3",{id:"on-ios"},"On iOS:"),(0,i.kt)("p",null,"Here is an example of a ",(0,i.kt)("strong",{parentName:"p"},"manifest.json file"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-4d"},'{\n    "name": "objectFormatter",\n    "binding": "objectAddress",\n    "type": "object" \n    "target" : ["ios", "android"]\n}\n\n')),(0,i.kt)("p",null,"To get the number, the street, and the city, let\u2019s build a custom ",(0,i.kt)("strong",{parentName:"p"},"Kotlin formatter"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-4d"},'import UIKit\nimport QMobileUI\n\nextension UILabel {\n    @objc dynamic var objectAddress: [String: Any]? {\n        get {\n            return nil\n        }\n        set {\n            if let newValue = newValue {\n                guard let value1 = newValue["name"] as? String,\n                      let value2 = newValue["address1"] as? String,\n                      let value3 = newValue["zipCode"] as? String,\n                      let value4 = newValue["city"] as? String else {\n                          return\n                      }\n                self.text = "\\(value1) - \\(value2) - \\(value3) \\(value4)"\n            } else {\n                self.text = ""\n            }\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Putting all that together, you can save this formatter as a ",(0,i.kt)("strong",{parentName:"p"},".kt")," file in the formatter folder and use it in your mobile project."),(0,i.kt)("p",null,"Check out the final result:"),(0,i.kt)("h3",{id:"on-android"},"On Android"),(0,i.kt)("p",null,"If you want a formatter that will dial a phone number value on click, we will have the following ",(0,i.kt)("strong",{parentName:"p"},"manifest file")," containing a ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"binding"),",a ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-4d"},'{\n    "name": "phone",\n    "binding": "phoneAction",\n    "type" : "text",\n    "target" : ["ios", "android"]\n}\n')),(0,i.kt)("p",null,'Note that the binding value "phoneAction" will be used in the Kotlin file and that the ',(0,i.kt)("inlineCode",{parentName:"p"},"BindingAdapter")," will interact with a specific field in an Android XML layout."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can add several Android/iOS specifications to your app and specify them in your ",(0,i.kt)("em",{parentName:"p"},"manifest.json")," file.\nFor instance, to add a specific permission to your app, you can add a ",(0,i.kt)("inlineCode",{parentName:"p"},"capabilities")," block as follows:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-4d"},'"capabilities" : {\n       "android" : [ "android.permission.WRITE_EXTERNAL_STORAGE" ]\n')))),(0,i.kt)("p",null,"Here is the ",(0,i.kt)("inlineCode",{parentName:"p"},"PhoneAction.kt")," file to dial a phone number value on click :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-4d"},'package ___PACKAGE___\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.widget.TextView\nimport androidx.databinding.BindingAdapter\n\n@BindingAdapter("phoneAction")\nfun phoneAction(view: TextView, phoneAction: String?) {\n    if (phoneAction.isNullOrEmpty()) return\n    view.text = phoneAction\n    view.setOnClickListener {\n        val dialIntent = Intent(Intent.ACTION_DIAL)\n        dialIntent.data = Uri.parse("tel:$phoneAction")\n        view.context.startActivity(dialIntent)\n    }\n}\n')),(0,i.kt)("p",null,"Putting all that together, you can save this formatter as a ",(0,i.kt)("strong",{parentName:"p"},".kt")," file in the formatter folder and use it in your mobile project."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Architecture",src:n(32813).Z})),(0,i.kt)("p",null,"Check out the final result:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Final result",src:n(57456).Z})," "),(0,i.kt)("p",null,"Don't hesitate to give us feedbck on the 4D Forum, and check out the documentation for more details!"))}u.isMDXComponent=!0},32813:function(e,t,n){"use strict";t.Z=n.p+"assets/images/phoneAction_dir-4a33175d2cc12f780e091d476ecaa3b0.png"},57456:function(e,t,n){"use strict";t.Z=n.p+"assets/images/rendu-android-14f71c3c2305115bf53934226b91161e.png"}}]);